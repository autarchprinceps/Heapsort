package heapsort;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import javax.swing.JPanel;

/**
 *
 * @author Patrick Robinson, Nick Herrmannsd√∂rfer, Erwin Stamm
 */
public class ArrayView extends javax.swing.JPanel {
    /**
     * Creates new form ArrayView
     */
    public ArrayView() {
        initComponents();
        this.setDoubleBuffered(true);
    }

    private boolean swap = false;
    private boolean comparisonParent = false;
    private boolean comparisonFlat = false;
    private boolean finish = false;
    private boolean end = false;
    private int counterFinish = 0;
    private int firstIndex = -1;
    private int secondIndex = -1;
    private boolean firstLoop = false;
    private int[] arState;
    private int max;

    public void drawState(int i, int tmpWidth, Command command, Command commandNext, int widthRect, int max, boolean bool) {
        arState = command.State.clone();
        this.max = max;
        for (int j = 0; j < command.State.length; j++) {
            if(bool == true){
                if(firstLoop == false){
                    if(!(command.Type.toString().equals("End"))){
                        if (commandNext.Type.toString().equals("Swap")) {
                                swap = true;
                                firstIndex = commandNext.FirstIndex;
                                secondIndex = commandNext.SecondIndex;
                                firstLoop = true;
                        }
                        if (commandNext.Type.toString().equals("ComparisonParent")) {
                                comparisonParent = true;
                                firstIndex = commandNext.FirstIndex;
                                secondIndex = commandNext.SecondIndex;
                                firstLoop = true;
                        }
                        if (commandNext.Type.toString().equals("ComparisonFlat")) {
                                comparisonFlat = true;
                                firstIndex = commandNext.FirstIndex;
                                secondIndex = commandNext.SecondIndex;
                                firstLoop = true;
                        }
                        if (commandNext.Type.toString().equals("Finish")) {
                                finish = true;
                                firstIndex = commandNext.FirstIndex;
                                secondIndex = commandNext.SecondIndex;
                                firstLoop = true;
                                counterFinish++;
                        }
                    }else{
                        end = true;
                    }
                }
            }
        }
    }

    @Override
    public void paint(Graphics g){
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2.setColor(Color.white);
            g2.fillRect(0, 0, this.getWidth(), this.getHeight());

            int tmpWidth = 0;
            try{
                    for(int i = 0; i < arState.length; i++){
                            int widthRect = Math.round((this.getWidth() - 10 * arState.length) / arState.length);
                            int zahl = arState[i];
                            g2.drawRect(tmpWidth, Math.round(this.getHeight() - 10 - (((this.getHeight() - 10) / max) * zahl)), widthRect,
                                            Math.round((this.getHeight() / max) * zahl));
                            tmpWidth += widthRect + 10;
                    }
            }catch(NullPointerException e){
            }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
